use crate::core::{Event, Key, MouseButton};

use glium::glutin::event::{
    ElementState, KeyboardInput, MouseButton as GlutinMouseButton, VirtualKeyCode, WindowEvent,
};

pub struct Input;

impl Input {
    pub fn key_from(key_code: VirtualKeyCode) -> Option<Key> {
        match key_code {
            VirtualKeyCode::Key1 => Some(Key::Key1),
            VirtualKeyCode::Key2 => Some(Key::Key2),
            VirtualKeyCode::Key3 => Some(Key::Key3),
            VirtualKeyCode::Key4 => Some(Key::Key4),
            VirtualKeyCode::Key5 => Some(Key::Key5),
            VirtualKeyCode::Key6 => Some(Key::Key6),
            VirtualKeyCode::Key7 => Some(Key::Key7),
            VirtualKeyCode::Key8 => Some(Key::Key8),
            VirtualKeyCode::Key9 => Some(Key::Key9),
            VirtualKeyCode::Key0 => Some(Key::Key0),
            VirtualKeyCode::A => Some(Key::A),
            VirtualKeyCode::B => Some(Key::B),
            VirtualKeyCode::C => Some(Key::C),
            VirtualKeyCode::D => Some(Key::D),
            VirtualKeyCode::E => Some(Key::E),
            VirtualKeyCode::F => Some(Key::F),
            VirtualKeyCode::G => Some(Key::G),
            VirtualKeyCode::H => Some(Key::H),
            VirtualKeyCode::I => Some(Key::I),
            VirtualKeyCode::J => Some(Key::J),
            VirtualKeyCode::K => Some(Key::K),
            VirtualKeyCode::L => Some(Key::L),
            VirtualKeyCode::M => Some(Key::M),
            VirtualKeyCode::N => Some(Key::N),
            VirtualKeyCode::O => Some(Key::O),
            VirtualKeyCode::P => Some(Key::P),
            VirtualKeyCode::Q => Some(Key::Q),
            VirtualKeyCode::R => Some(Key::R),
            VirtualKeyCode::S => Some(Key::S),
            VirtualKeyCode::T => Some(Key::T),
            VirtualKeyCode::U => Some(Key::U),
            VirtualKeyCode::V => Some(Key::V),
            VirtualKeyCode::W => Some(Key::W),
            VirtualKeyCode::X => Some(Key::X),
            VirtualKeyCode::Y => Some(Key::Y),
            VirtualKeyCode::Z => Some(Key::Z),
            VirtualKeyCode::Escape => Some(Key::Escape),
            VirtualKeyCode::F1 => Some(Key::F1),
            VirtualKeyCode::F2 => Some(Key::F2),
            VirtualKeyCode::F3 => Some(Key::F3),
            VirtualKeyCode::F4 => Some(Key::F4),
            VirtualKeyCode::F5 => Some(Key::F5),
            VirtualKeyCode::F6 => Some(Key::F6),
            VirtualKeyCode::F7 => Some(Key::F7),
            VirtualKeyCode::F8 => Some(Key::F8),
            VirtualKeyCode::F9 => Some(Key::F9),
            VirtualKeyCode::F10 => Some(Key::F10),
            VirtualKeyCode::F11 => Some(Key::F11),
            VirtualKeyCode::F12 => Some(Key::F12),
            VirtualKeyCode::F13 => None,
            VirtualKeyCode::F14 => None,
            VirtualKeyCode::F15 => None,
            VirtualKeyCode::F16 => None,
            VirtualKeyCode::F17 => None,
            VirtualKeyCode::F18 => None,
            VirtualKeyCode::F19 => None,
            VirtualKeyCode::F20 => None,
            VirtualKeyCode::F21 => None,
            VirtualKeyCode::F22 => None,
            VirtualKeyCode::F23 => None,
            VirtualKeyCode::F24 => None,
            VirtualKeyCode::Snapshot => None,
            VirtualKeyCode::Scroll => None,
            VirtualKeyCode::Pause => None,
            VirtualKeyCode::Insert => None,
            VirtualKeyCode::Home => None,
            VirtualKeyCode::Delete => Some(Key::Delete),
            VirtualKeyCode::End => None,
            VirtualKeyCode::PageDown => None,
            VirtualKeyCode::PageUp => None,
            VirtualKeyCode::Left => Some(Key::ArrowLeft),
            VirtualKeyCode::Up => Some(Key::ArrowUp),
            VirtualKeyCode::Right => Some(Key::ArrowRight),
            VirtualKeyCode::Down => Some(Key::ArrowDown),
            VirtualKeyCode::Back => Some(Key::Backspace),
            VirtualKeyCode::Return => Some(Key::Return),
            VirtualKeyCode::Space => Some(Key::Space),
            VirtualKeyCode::Compose => None,
            VirtualKeyCode::Caret => None,
            VirtualKeyCode::Numlock => None,
            VirtualKeyCode::Numpad0 => Some(Key::Numpad0),
            VirtualKeyCode::Numpad1 => Some(Key::Numpad1),
            VirtualKeyCode::Numpad2 => Some(Key::Numpad2),
            VirtualKeyCode::Numpad3 => Some(Key::Numpad3),
            VirtualKeyCode::Numpad4 => Some(Key::Numpad4),
            VirtualKeyCode::Numpad5 => Some(Key::Numpad5),
            VirtualKeyCode::Numpad6 => Some(Key::Numpad6),
            VirtualKeyCode::Numpad7 => Some(Key::Numpad7),
            VirtualKeyCode::Numpad8 => Some(Key::Numpad8),
            VirtualKeyCode::Numpad9 => Some(Key::Numpad9),
            VirtualKeyCode::NumpadAdd => Some(Key::NumpadAdd),
            VirtualKeyCode::NumpadDivide => Some(Key::NumpadDivide),
            VirtualKeyCode::NumpadDecimal => Some(Key::NumpadDecimal),
            VirtualKeyCode::NumpadComma => Some(Key::NumpadComma),
            VirtualKeyCode::NumpadEnter => Some(Key::NumpadEnter),
            VirtualKeyCode::NumpadEquals => Some(Key::NumpadEquals),
            VirtualKeyCode::NumpadMultiply => Some(Key::NumpadMultiply),
            VirtualKeyCode::NumpadSubtract => Some(Key::NumpadSubtract),
            VirtualKeyCode::AbntC1 => None,
            VirtualKeyCode::AbntC2 => None,
            VirtualKeyCode::Apostrophe => None,
            VirtualKeyCode::Apps => None,
            VirtualKeyCode::Asterisk => None,
            VirtualKeyCode::At => None,
            VirtualKeyCode::Ax => None,
            VirtualKeyCode::Backslash => None,
            VirtualKeyCode::Calculator => None,
            VirtualKeyCode::Capital => None,
            VirtualKeyCode::Colon => None,
            VirtualKeyCode::Comma => None,
            VirtualKeyCode::Convert => None,
            VirtualKeyCode::Equals => None,
            VirtualKeyCode::Grave => None,
            VirtualKeyCode::Kana => None,
            VirtualKeyCode::Kanji => None,
            VirtualKeyCode::LAlt => None,
            VirtualKeyCode::LBracket => None,
            VirtualKeyCode::LControl => None,
            VirtualKeyCode::LShift => None,
            VirtualKeyCode::LWin => None,
            VirtualKeyCode::Mail => None,
            VirtualKeyCode::MediaSelect => None,
            VirtualKeyCode::MediaStop => None,
            VirtualKeyCode::Minus => None,
            VirtualKeyCode::Mute => None,
            VirtualKeyCode::MyComputer => None,
            VirtualKeyCode::NavigateForward => None,
            VirtualKeyCode::NavigateBackward => None,
            VirtualKeyCode::NextTrack => None,
            VirtualKeyCode::NoConvert => None,
            VirtualKeyCode::OEM102 => None,
            VirtualKeyCode::Period => None,
            VirtualKeyCode::PlayPause => None,
            VirtualKeyCode::Plus => None,
            VirtualKeyCode::Power => None,
            VirtualKeyCode::PrevTrack => None,
            VirtualKeyCode::RAlt => None,
            VirtualKeyCode::RBracket => None,
            VirtualKeyCode::RControl => None,
            VirtualKeyCode::RShift => None,
            VirtualKeyCode::RWin => None,
            VirtualKeyCode::Semicolon => None,
            VirtualKeyCode::Slash => None,
            VirtualKeyCode::Sleep => None,
            VirtualKeyCode::Stop => None,
            VirtualKeyCode::Sysrq => None,
            VirtualKeyCode::Tab => None,
            VirtualKeyCode::Underline => None,
            VirtualKeyCode::Unlabeled => None,
            VirtualKeyCode::VolumeDown => None,
            VirtualKeyCode::VolumeUp => None,
            VirtualKeyCode::Wake => None,
            VirtualKeyCode::WebBack => None,
            VirtualKeyCode::WebFavorites => None,
            VirtualKeyCode::WebForward => None,
            VirtualKeyCode::WebHome => None,
            VirtualKeyCode::WebRefresh => None,
            VirtualKeyCode::WebSearch => None,
            VirtualKeyCode::WebStop => None,
            VirtualKeyCode::Yen => None,
            VirtualKeyCode::Copy => None,
            VirtualKeyCode::Paste => None,
            VirtualKeyCode::Cut => None,
        }
    }

    pub fn from(event: WindowEvent) -> Option<Event> {
        match event {
            WindowEvent::ReceivedCharacter(c) => Some(Event::Character(c)),
            WindowEvent::KeyboardInput {
                input:
                    KeyboardInput {
                        state,
                        virtual_keycode: Some(key),
                        ..
                    },
                ..
            } => match state {
                ElementState::Pressed => Self::key_from(key).map(Event::KeyPressed),
                ElementState::Released => Self::key_from(key).map(Event::KeyReleased),
            },
            WindowEvent::CursorMoved { position: _, .. } => None, // TODO:
            WindowEvent::MouseWheel { delta: _, .. } => None,     // TODO:
            WindowEvent::MouseInput { state, button, .. } => {
                let button = match button {
                    GlutinMouseButton::Left => Some(MouseButton::Left),
                    GlutinMouseButton::Right => Some(MouseButton::Right),
                    GlutinMouseButton::Middle => Some(MouseButton::Middle),
                    GlutinMouseButton::Other(_) => None,
                };
                match state {
                    ElementState::Pressed => button.map(Event::MouseButtonPressed),
                    ElementState::Released => button.map(Event::MouseButtonReleased),
                }
            }
            _ => None,
        }
    }
}
